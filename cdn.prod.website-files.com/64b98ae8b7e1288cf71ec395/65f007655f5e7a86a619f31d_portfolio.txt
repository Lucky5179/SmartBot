//old: https://uploads-ssl.webflow.com/64b98ae8b7e1288cf71ec395/65b823498a9eb76c3d25b219_portfolio.txt

//PORTFOLIO SECTION
var loadedData
var buysTable = []

var loadedSells
var sellsTable = []

//REWARD SECTION
var rewardPoolData


var dailyRewardText = document.getElementById('day-reward')
var dailyTaxText = document.getElementById('day-tax')
var dailyTaxSplit
var dailyTaxSplitText = document.getElementById('day-tax-split')

var dailyAIText = document.getElementById('day-AI')
var dailyAISplit
var dailyAISplitText= document.getElementById('day-AI-split')


var weeklyRewardText = document.getElementById('week-reward')
var weeklyTaxText = document.getElementById('week-tax')
var weeklyTaxSplit
var weeklyTaxSplitText = document.getElementById('week-tax-split')


var weeklyAIText = document.getElementById('week-AI')
var weeklyAISplit
var weeklyAISplitText = document.getElementById('week-AI-split')

var monthlyRewardText = document.getElementById('month-reward')
var monthlyTaxText = document.getElementById('month-tax')
var monthlyTaxSplit
var monthlyTaxSplitText = document.getElementById('month-tax-split')


var monthlyAIText = document.getElementById('month-AI')
var monthlyAISplit
var monthlyAISplitText = document.getElementById('month-AI-split')

var totalRewardText = document.getElementById('total-reward')
var totalTaxText = document.getElementById('total-tax')
var totalTaxSplit
var totalTaxSplitText = document.getElementById('total-tax-split')


var totalAIText = document.getElementById('total-AI')
var totalAISplit
var totalAISplitText = document.getElementById('total-AI-split')





async function getRewardPoolData() {
  try {
    const response = await $.getJSON('https://SmartBotapi.onrender.com/api/SmartBot/profits');
    //const response = await $.getJSON('https://SmartBotapi.onrender.com/api/accounts/SmartBot/sells');

    rewardPoolData = response;
    //console.log("Data loaded ok:", rewardPoolData);
    
    
    //Day
    dailyTaxText.innerHTML = toFixedSimple(rewardPoolData.day.tax)
    dailyAIText.innerHTML = toFixedSimple(rewardPoolData.day.bot)

    dailyTaxSplit = rewardPoolData.day.tax / (rewardPoolData.day.tax + rewardPoolData.day.bot)
    dailyAISplit = rewardPoolData.day.bot / (rewardPoolData.day.tax + rewardPoolData.day.bot)
    
    dailyTaxSplitText.innerHTML = toFixedSimple(dailyTaxSplit * 100) + "%"
    dailyAISplitText.innerHTML = toFixedSimple(dailyAISplit * 100) + "%"

    dailyRewardText.innerHTML = toFixedSimple(rewardPoolData.day.tax + rewardPoolData.day.bot)

    //Week
    weeklyTaxText.innerHTML = toFixedSimple(rewardPoolData.week.tax)
    weeklyAIText.innerHTML = toFixedSimple(rewardPoolData.week.bot)

    weeklyTaxSplit = toFixedSimple(rewardPoolData.week.tax / (rewardPoolData.week.tax + rewardPoolData.week.bot))
    weeklyAISplit = toFixedSimple(rewardPoolData.week.bot / (rewardPoolData.week.tax + rewardPoolData.week.bot))

    weeklyTaxSplitText.innerHTML = toFixedSimple(weeklyTaxSplit * 100) + "%"
    weeklyAISplitText.innerHTML = toFixedSimple(weeklyAISplit * 100) + "%"

    weeklyRewardText.innerHTML = toFixedSimple(rewardPoolData.week.tax + rewardPoolData.week.bot)

    //Month
    monthlyTaxText.innerHTML = toFixedSimple(rewardPoolData.month.tax)
    monthlyAIText.innerHTML = toFixedSimple(rewardPoolData.month.bot)

    monthlyTaxSplit= rewardPoolData.month.tax / (rewardPoolData.month.tax + rewardPoolData.month.bot)
    monthlyAISplit= rewardPoolData.month.bot / (rewardPoolData.month.tax + rewardPoolData.month.bot)

    monthlyTaxSplitText.innerHTML = toFixedSimple(monthlyTaxSplit * 100) + "%"
    monthlyAISplitText.innerHTML = toFixedSimple(monthlyAISplit * 100) + "%"

    monthlyRewardText.innerHTML = toFixedSimple(rewardPoolData.month.tax + rewardPoolData.month.bot)

    //Total
    totalTaxText.innerHTML = toFixedSimple(rewardPoolData.total.tax)
    totalAIText.innerHTML = toFixedSimple(rewardPoolData.total.bot)

    totalTaxSplit = rewardPoolData.total.tax / (rewardPoolData.total.tax + rewardPoolData.total.bot)
    totalAISplit = rewardPoolData.total.bot / (rewardPoolData.total.tax + rewardPoolData.total.bot)

    totalTaxSplitText.innerHTML = toFixedSimple(totalTaxSplit * 100) + "%"
    totalAISplitText.innerHTML = toFixedSimple(totalAISplit * 100) + "%"

    totalRewardText.innerHTML = toFixedSimple(rewardPoolData.total.tax + rewardPoolData.total.bot)


    // You can perform further operations with the loaded data here
  } catch (error) {
    console.error("Error fetching JSON data:", error);
    // Handle the error gracefully
  }

  
} 




async function getSellsDATA() {
  try {
    const response = await $.getJSON('https://SmartBotapi.onrender.com/api/accounts/SmartBot/sells');
    loadedSells = response.sells;
    console.log("Sells loaded:", loadedSells);


    if (isArrayEmpty(sellsTable)) {
      updateSellTable()
    }
    // You can perform further operations with the loaded data here
  } catch (error) {
    console.error("Error fetching JSON data:", error);
    // Handle the error gracefully
  }
}


async function getJsonDATA() {
  try {
    const ethPromise = $.getJSON('https://SmartBotapi.onrender.com/api/accounts/audit/portfolio')
    const solPromise = $.getJSON('https://SmartBotapi.onrender.com/api/accounts/audit/portfolioSol')

    const result = await Promise.all([
        ethPromise,
        solPromise
    ])

    console.log(result)

    //const response = await $.getJSON('https://SmartBotapi.onrender.com/api/accounts/audit/portfolio');

    for(let i = 0; i < result[0].balances.length; i++) {
      result[0].balances[i].network = "eth"
    }
    for(let i = 0; i < result[1].balances.length; i++) {
      result[1].balances[i].network = "sol"
    }

    loadedData = [...result[0].balances, ...result[1].balances]


    //console.log("Data loaded:", loadedData);
    if (isArrayEmpty(buysTable)) {
      updateDatatable()
    }
    // You can perform further operations with the loaded data here
  } catch (error) {
    console.error("Error fetching JSON data:", error);
    // Handle the error gracefully
  }
}

getRewardPoolData()

getJsonDATA()
getSellsDATA()


async function refreshDataTable(){
  if ($.fn.DataTable.isDataTable('#portfolio')) {
    $('#portfolio').DataTable().clear();
    $('#portfolio').DataTable().draw();

    $('#portfolio').DataTable().destroy();
    

    buysTable = []
  } 
  getJsonDATA()
}


function updateDatatable() {
  for (let i = 0; i < (loadedData.length - 1); i++) {
    //console.log(i);
    pushNewDataForRow(i)
}

 $('#portfolio').DataTable( {
    data: buysTable,
    order: [[1, 'desc']],
    columnDefs: [
        {
            targets: 4, 
            render: function(data, type, row, meta) {
                if (type === 'sort') {
                    return data; // Use raw timestamp for sorting
                }
                return formatTimestamp(data); // Use formatted date for display
            }
        },
        {
           "targets": 6,
    "data": "etherscan_link",
    "render": function ( data, type, row, meta ) {
      const etherscanLink = row[6];
      return '<a target="_blank" href="'+etherscanLink+'">Link</a>';
    }
        }
    ]
  });

}







function updateSellTable() {
  for (let i = 0; i < (loadedSells.length - 1); i++) {
    //console.log(i);
    pushNewSellsForRow(i)
}

$('#sellFolio').DataTable({
    data: sellsTable,
    columnDefs: [
        {
            targets: 4, 
            render: function(data, type, row, meta) {
                if (type === 'sort') {
                    return data; // Use raw timestamp for sorting
                }
                return formatTimestamp(data); // Use formatted date for display
            }
        },
        {
            targets: 5, 
            render: function(data, type, row, meta) {
                if (type === 'sort') {
                    return data; // Use raw seconds for sorting
                }
                return formatDuration(data); // Use formatted duration for display
            }
        },
        {
           "targets": 7,
    "data": "etherscan_link",
    "render": function ( data, type, row, meta ) {
      const etherscanLink = row[7];
      return '<a href="'+etherscanLink+'">Link</a>';
    }
        }
    ]
});

}


function pushNewSellsForRow(index) {


  //var shortTokenAddress = loadedSells[index].seller
  var amountTokens = parseInt(loadedSells[index].sellTokens).toLocaleString() +" " + shortenText(loadedSells[index].symbol,20);

  var buySizeVal = toFixedSimpleSell(loadedSells[index].buyWithETH)
  var sellVal = toFixedSimpleSell(loadedSells[index].sellForETH)

  var profitVal = toFixedSimpleSell(sellVal - buySizeVal)
  var multiplierVal = toFixedSimpleSell(sellVal / buySizeVal)
  var sellTime = loadedSells[index].sellTime
  var duration = calculateDurationInSeconds(loadedSells[index].buyTime,loadedSells[index].sellTime)
  //var displayedTimeString = buyTime.days + "days " + buyTime.hours * "hours " + buyTime.minutes + "minutes ago"


  var rowToAdd = [
        amountTokens,
        buySizeVal + " ETH",
        sellVal + " ETH",
        profitVal + " ETH" + " (" + multiplierVal + "X)",
        sellTime, //+ " - held for " + calculateDuration(loadedSells[index].buyTime,loadedSells[index].sellTime),
        duration,
        returnWalletID(loadedSells[index].seller),
       // shortTokenAddress.substring(0, 4) + "..." + shortTokenAddress.substring(shortTokenAddress.length - 4),
        "https://etherscan.io/tx/"+ loadedSells[index].sellHash,
    ]

      sellsTable.push(rowToAdd)

      
}





function pushNewDataForRow(index) {

  var shortTokenAddress = loadedData[index].account
  var amountTokens = parseInt(loadedData[index].balanceWholeTokens).toLocaleString() +" " + shortenText(loadedData[index].symbol,20);

  var priceValue = toFixed(loadedData[index].currentPriceUSD)
  var buyTime = loadedData[index].firstBuyTime ?? ""
  //var displayedTimeString = buyTime.days + "days " + buyTime.hours * "hours " + buyTime.minutes + "minutes ago"
  //console.log("account", loadedData[index].account)

  var indexData = loadedData[index]

  var rowToAdd = [
        amountTokens,
        "$" + toFixed(indexData.valueUSD),
        "$" + priceValue,
        returnWalletID(indexData.account),
        buyTime,
        profitFormatting(indexData.profitX),
       // shortTokenAddress.substring(0, 4) + "..." + shortTokenAddress.substring(shortTokenAddress.length - 4),
        //"https://etherscan.io/token/"+ indexData.token + "?a="+ indexData.account,
  ]

  if(indexData.network === "eth") {
    rowToAdd.push("https://etherscan.io/token/"+ indexData.token + "?a="+ indexData.account)
  }
  else if(indexData.network === "sol") {
    rowToAdd.push("https://solscan.io/tx/" + indexData.firstBuySig)
  }


      buysTable.push(rowToAdd)
}


$("#refresh-portfolio-btn").on("click",() => {
  refreshDataTable()
})


function profitFormatting(profit) {
  if (profit) {
    return toFixedSimple(profit) + "X"
  } else {
    return "0"
  }
}



function calculateDurationInSeconds(timestamp1, timestamp2) {
  if (timestamp1 === null || timestamp2 === null) {
    return 0;
  }

  const millisecondsPerSecond = 1000;

  if (isNaN(timestamp1) || isNaN(timestamp2)) {
    return 0;
  }

  const timeDifference = Math.abs(timestamp2 - timestamp1);

  if (isNaN(timeDifference)) {
    return 0;
  }

  const seconds = Math.floor(timeDifference / millisecondsPerSecond);

  return seconds;
}




  


/*
function formatTimestamp(timestamp) {
    const date = new Date(timestamp);
    return date.toISOString(); // Formats date in ISO 8601 format
}

*/

/*
function formatTimestamp(timestamp) {
    if (timestamp === null) {
        return {
            sortable: "",
            display: "N/A"
        };
    }

    const date = new Date(timestamp);
    
    const displayOptions = {
        year: 'numeric',
        month: 'long',
        day: 'numeric',
        hour: 'numeric',
        minute: 'numeric',
        second: 'numeric',
        hour12: true
    };

    const sortableString = date.toISOString();
    const displayString = date.toLocaleString('en-US', displayOptions);

    return {
        sortable: sortableString,
        display: displayString
    };
}


*/

function formatTimestamp(timestamp) {
    if (timestamp === null) {
        return ''; // Return empty string when timestamp is null
    }

    const date = new Date(timestamp);
    const options = { year: 'numeric', month: 'long', day: 'numeric', hour: 'numeric', minute: 'numeric', second: 'numeric'};
    return date.toLocaleDateString('en-US', options);
}



function formatDuration(seconds) {
  const secondsPerMinute = 60;
  const secondsPerHour = 60 * secondsPerMinute;
  const secondsPerDay = 24 * secondsPerHour;

  const days = Math.floor(seconds / secondsPerDay);
  const hours = Math.floor((seconds % secondsPerDay) / secondsPerHour);
  const minutes = Math.floor((seconds % secondsPerHour) / secondsPerMinute);
  const remainingSeconds = seconds % secondsPerMinute;

  let durationString = '';

  if (days > 0) {
    durationString += `${days} day${days > 1 ? 's' : ''}`;
  }

  if (hours > 0) {
    durationString += ` ${hours} hour${hours > 1 ? 's' : ''}`;
  }

  if (minutes > 0) {
    durationString += ` ${minutes} minute${minutes > 1 ? 's' : ''}`;
  }

  if (remainingSeconds > 0) {
    durationString += ` ${remainingSeconds} second${remainingSeconds > 1 ? 's' : ''}`;
  }

  return durationString.trim();
}



// Example usage
const timestamp = 1692052571000; // Example timestamp
const formattedDate = formatTimestamp(timestamp);

//console.log("Formatted Date:", formattedDate);




function formatFloat(number) {
    if(number >= 1) {
        return number.toFixed(2)
    }
    else if(number >= 0.00001) {
        // Use toPrecision to get 4 significant figures.
        return parseFloat(number.toPrecision(4)).toString()
    } else {
        let str = number.toFixed(20); // Convert number to a string with many decimal places.
        let zeros = str.split(".")[1].match(/^0+/)[0].length  // Count leading zeros.
        
        if(zeros >= 5) {
            let significantDigits = str.split(".")[1].substring(zeros, zeros + 4)
            // Remove trailing zeros after the fourth significant figure
            significantDigits = parseFloat('0.' + significantDigits).toString().substring(2)
            
            // Convert number of zeros into subscript
            let zerosSubscript = Array.from(String(zeros)).map(digit => 
                String.fromCodePoint("Ã¢â€šâ‚¬".codePointAt(0) + parseInt(digit))
            ).join('')
            
            return "0.0" + zerosSubscript + significantDigits;
        } else {
            // Just return the number rounded to 4 sig figs.
            return parseFloat(number.toPrecision(4)).toString()
        }
    }
}



function returnWalletID(wallet) {
  if (wallet == "0x116d1edd539e5e93551973eb2a71898c9095122f") {
    return "Legacy Contract"
  } else if (wallet == "0x74349190f630e7d220192ee2123d5aa820fc44d8") {
    return "Legacy 1"
  } else if (wallet == "0x0d2e78134f05bd2706bdef9249464d2e10130495") {
    return "Legacy 2"
  } else if(wallet == "0x41107d725b1daa17c979cbc02fbeefaf84cedd4c") {
    return "Legacy 3"
  } else if (wallet == "0xe03a775f364612688c1c897efcf84812f9b14e5c") {
    return "Wallet 1"
  } else if (wallet == "0x9e678213687f03b73d931aae4019409c6a052050") {
    return "Wallet 2"
  } else if (wallet == "0x0863433f1cfe32e73630c8d626d9cb04fc733f79") {
    return "Wallet 3"
  } else if (wallet == "0x2d307c7154bef1a2e6ae5ce68d2f839c60ea0b50") {
    return "Wallet 4"
  } else if (wallet == "GXwwCSqN8GUdgev4y1SRx4NTD6D7wADn5SvoxKWwwBot") {
    return "Solana"
  } else {
    console.log("did not find match", wallet)
    return "AI Contract"
  }
}


function getTimeSinceFormatted(timestamp) {
    const currentTime = new Date().getTime();
    const timeDifference = currentTime - timestamp;

    const days = Math.floor(timeDifference / (1000 * 60 * 60 * 24));
    const hours = Math.floor((timeDifference % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
    const minutes = Math.floor((timeDifference % (1000 * 60 * 60)) / (1000 * 60));

    const timeSinceFormatted = [];
    if (days > 0) timeSinceFormatted.push(`${days} days`);
    if (hours > 0) timeSinceFormatted.push(`${hours} hours`);
    if (minutes > 0) timeSinceFormatted.push(`${minutes} minutes`);

    return timeSinceFormatted.length > 0 ? timeSinceFormatted.join(' ') + ' ago' : 'No Data';
}




function shortenText(text, maxLength) {

    if (text) {} else {
      return ""
    }
    if (text.length <= maxLength) {
        return text; // Return the original text if it's within the limit
    } else {
        // Shorten the text and add "..." at the end
        return text.substring(0, maxLength - 3) + "...";
    }
}


 function isArrayEmpty(arr) {
  return arr.length === 0;
} 



function convertToNumber (bigNumber)
{
    return parseInt(bigNumber.toString())
}

function convertToEther (bigNumber)
{
    return parseFloat(ethers.utils.formatUnits(bigNumber.toString(), 18))
}

function convertToWei(ether)
{
    return ethers.utils.parseEther(ether.toString()).toString()
}

function convertToWeiHex (ether)
{
    return ethers.utils.parseEther(ether.toString()).toHexString()
}

function convertToHex (value)
{
    return ethers.BigNumber.from(value).toHexString()
}

function convertHexToAddress (hex)
{
    return "0x" + hex.substr(26, 40)
}

function convertBigNumberToHexAddress (number)
{
	let hex = number.toHexString()

	if(!hex)
	{
		return number
	}

	if(!hex.startsWith("0x"))
	{
		return number
	}

	hex = hex.substring(2)

	while(hex.length < 40)
	{
		hex = "0" + hex
	}

	return "0x" + hex
}

function sleep (ms) 
{
    return new Promise(resolve => setTimeout(resolve, ms))
}


function toFixedSimple(x) {
  if (typeof x === 'undefined') {
    return "?";
  }

  x = Number(x); // Convert x to a number (in case it's a string or other type)
  return x.toFixed(2); // Round to two decimal places

  // Rest of your existing code
  // ...
}

function toFixedSimpleSell(x) {
  if (typeof x === 'undefined') {
    return 0.05;
  }

  x = Number(x); // Convert x to a number (in case it's a string or other type)
  return x.toFixed(2); // Round to two decimal places

  // Rest of your existing code
  // ...
}

function toFixed(x) {

  if(x > 0.1) {
    return x.toLocaleString('fullwide', {useGrouping:false})
  }

  x = x.toPrecision(4)

  if (Math.abs(x) < 1.0) {
    var e = parseInt(x.toString().split('e-')[1]);
    if (e) {
        x *= Math.pow(10,e-1);
        x = '0.' + (new Array(e)).join('0') + x.toString().substring(2);
    }
  } else {
    var e = parseInt(x.toString().split('+')[1]);
    if (e > 20) {
        e -= 20;
        x /= Math.pow(10,e);
        x += (new Array(e+1)).join('0');
    }
  }
  return x
}


function toNumber(number) {
  return parseInt(number.toString())
}